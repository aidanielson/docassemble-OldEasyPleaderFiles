features:
  css: 2023-01-26_flatly_with_sandstone_colors.css
  centered: False
---
metadata:
  title: |
    Logo title
  short title: Polished legal documents. Zero hassle.
---
mandatory: True
code: |
  version = 0
---
event: new_version
code: |
  version += 1
---
mandatory: True
code: |
  set_parts(title='EasyPleader', logo='<img src="' + company_logo.url_for() + '" style="height: 65px; width: 280px;">')
  intro
  author.name
  atty_info_in_caption
  if author.is_me or author.is_attorney:
    client[0].name.text
    client_contact_review
  court.short_name
  party_contact[0].name.text
  party_contact_review
  lead_filing_party
  if enter_nonparty_contacts:
    nonparty_contact[0].name.text
  doc.type
  if doc.type == 'Declaration':
    doc.declarant
  if doc.proceeding:
    proceeding.moving_doc_title
  doc.title_full
  if doc.has_hrg:
    hrg.date
  if attach_exhibits:
    information_gathered
    bundle
    exhibits_bundled
  sig_block_date_field
  if doc.sign:
    signature
  user_approves
  final_screen
---
modules: 
  - .courts_works
  - .biz_days
---
objects:
  - company_logo: DAStaticFile.using(filename='EP_Logo_White.png')
  - aid_signature: DAStaticFile.using(filename='AID_PDF_Sig.png')
  - author: Individual
  - client: DAList.using(object_type=Person, there_are_any=True, there_is_another=False)
  - court: DAObject
  - case: DAObject
  - party_contact: DAList.using(object_type=Person, there_are_any=True, there_is_another=False)
  - nonparty_contact: DAList.using(object_type=Person, there_are_any=True)
  - attorney: Individual
  - hrg: DAObject
  - doc: DAObject
  - exhibit: DADict.using(object_type=DAObject, there_are_any=True)
  - exhibit_page: DAList
  - proceeding: DAObject
---
question: |
  *Easy*Pleader ---> Polished pleadings. Less hassle. 
field: intro
---
question: |
  Enter the author's contact info.
subquestion: |
  This information will go into the author's caption block at the top-left of the caption page.
fields:
  - Full Name: author.name.text
  - Is the author an attorney?: author.is_attorney
    datatype: yesnoradio
  - Law Firm: author.law_firm
    show if: author.is_attorney
  - Role at Law Firm: author.law_firm_role
    show if: author.is_attorney
    note: |
      Example: "*managing partner of...partner and shareholder of...associate attorney at...*"
  - State Bar Number: author.sbn
    show if: author.is_attorney
    datatype: integer
  - Address: author.address.address
    address autocomplete: True
  - Unit: author.address.unit
    required: False
  - City: author.address.city
  - State: author.address.state
  - Zip: author.address.zip
  - Phone: author.phone_number
    validate: |
      lambda y: phone_number_is_valid(y) or validation_error("Please enter a valid, 10-digit phone number.")
  - Fax: author.fax_number
    validate: |
      lambda y: phone_number_is_valid(y) or validation_error("Please enter a valid, 10-digit phone number.")
    required: False
  - Email Address: author.email
    datatype: email
    required: False
---
question:
  Who is authoring this document?
field: author.is_me
buttons: 
  - "Tony Danielson": True
    color: primary
  - "Someone Else": False
    color: warning
---
code: |
  if author.is_me: 
    author.name.text = "Anthony I. Danielson"
    author.law_firm = "Danielson Kim Law Group, P.C."
    author.law_firm_role = "managing partner of"
    author.sbn = 285576
    author.address.address = "5170 Golden Foothill Parkway"
    author.address.city = "El Dorado Hills"
    author.address.state = "CA"
    author.address.zip = 95762
    author.phone_number = '9165203977'
    author.fax_number = '9165431601'
    author.email = 'Anthony@DanielsonKim.com'
---
code: |
  if author.is_me or author.is_attorney:
    atty_info_in_caption = True
  else:
    atty_info_in_caption = False
---
question: |
  Enter Case Information
fields:
  - Case Jurisdiction: court.short_name
    code: get_court_names()
  - Case Number: case.number
  - Original Filing Date: case.filing_date
    datatype: date
  - Trial Date: case.trial_date
    datatype: date
  - For the case **caption**, what are the litigant **roles**?: action_type
    default: Plaintiff v. Defendant
    choices:
      - Plaintiff v. Defendant
      - Petitioner v. Respondent
      - Something Else
  - Filing Party: other_filing_party_role
    input type: combobox
    choices:
      - Claimant
      - Applicant
      - Creditor
      - Appellant
    show if:
      variable: action_type
      is: 'Something Else'
  - Responding/Defending Party: other_responding_party_role
    input type: combobox
    choices:
      - Debtor
      - Accused
      - Appellee
    show if:
      variable: action_type
      is: 'Something Else'
  - Has anyone filed a cross-action or counterclaim in this case?: counteraction_filed
    datatype: yesnoradio
---
code: |
  filing_party_role = 'Plaintiff' if action_type == 'Plaintiff v. Defendant' else 'Petitioner' if action_type == 'Petitioner v. Respondent' else other_filing_party_role
  responding_party_role = 'Defendant' if action_type == 'Plaintiff v. Defendant' else 'Respondent' if action_type == 'Petitioner v. Respondent' else other_responding_party_role
---
question: |
  Client Info
subquestion: |
  Enter your client's information.
fields:
  - Select Party Role: client[i].role
    input type: combobox
    choices:
      - Plaintiff
      - Petitioner
      - Claimant
      - Defendant
      - Respondent
  - Is the client an individual or a business/entity?: client[i].human_or_entity
    input type: radio
    choices:
      - Individual
      - Business/Entity
  - Full Name: client[i].name.text
    show if:
      variable: client[i].human_or_entity
      is: 'Individual'
  - Business/Entity Name: client[i].name.text
    show if:
      variable: client[i].human_or_entity
      is: 'Business/Entity'
  - Shorthand Name: client[i].short_name
---
question: |
  Client Review
subquestion: |
    The ${client.number_as_word()} client you've entered thusfar are:
    
    ${ client.table }
    
    ${ client.add_action() }
continue button field: client_contact_review
---
table: client.table
rows: client
columns:
  - Role: |
      row_item.role
  - Name: |
      row_item.name.full()
edit:
  - role
allow reordering: True
---
question: |
  Other Named Parties
subquestion: |
  Enter the **OTHER** named parties in this case.
fields:
  - Select Party Role: party_contact[i].role
    input type: combobox
    choices:
      - Plaintiff
      - Petitioner
      - Claimant
      - Defendant
      - Respondent
  - Is this party an individual or a business/entity?: party_contact[i].human_or_entity
    input type: radio
    choices:
      - Individual
      - Business/Entity
  - Full Name: party_contact[i].name.text
    show if:
      variable: party_contact[i].human_or_entity
      is: 'Individual'
  - Business/Entity Name: party_contact[i].name.text
    show if:
      variable: party_contact[i].human_or_entity
      is: 'Business/Entity'
  - Is this party represented by an attorney?: party_contact[i].repd_by_attorney
    datatype: yesnoradio
  - Address: party_contact[i].address.address
    address autocomplete: True
  - Unit: party_contact[i].address.unit
    required: False
  - City: party_contact[i].address.city
  - State: party_contact[i].address.state
  - Zip: party_contact[i].address.zip
  - Phone: party_contact[i].phone_number
    validate: |
      lambda y: phone_number_is_valid(y) or validation_error("Please enter a valid, 10-digit phone number.")
  - Fax: party_contact[i].fax_number
    validate: |
      lambda y: phone_number_is_valid(y) or validation_error("Please enter a valid, 10-digit phone number.")
    required: False
  - Email Address: party_contact[i].email
    datatype: email
---
question: |
  Party Review
subquestion: |
    So far, you've entered ${ party_contact.number_as_word() } parties:
    
    ${ party_contact.table }
    
    ${ party_contact.add_action() }
continue button field: party_contact_review
---
table: party_contact.table
rows: party_contact
columns:
  - Party: |
      row_item.role
  - Name: |
      row_item.name.full()
  - Address: |
      row_item.address.block()
  - Email: |
      row_item.email
edit:
  - email
allow reordering: True
---
code: |
  all_parties = client + party_contact
---
question: |
  Caption Page Parties
subquestion: |
  Select the **first** (top) named party on each side for the case caption page.
fields:
  - Lead Filing Party: lead_filing_party
    code: all_parties
  - Lead Responding Party: lead_responding_party
    code: all_parties
---
question: |
  Do you want to enter **nonparty** case participants?
subquestion: |
  These include witnesses, litigation vendors (e.g., process servers, court reporters), and governmental roleplayers like sheriff/levying officer.
yesno: enter_nonparty_contacts
---
question: |
  Nonparty Case Participants
subquestion: |
  Enter contact info for all nonparty case participants.
fields:
  - What is this nonparty's role in this litigation?: nonparty_contact[i].role
    input type: combobox
    choices:
      - Fact Witness
      - Expert Witness
      - Court Reporter
      - Interpreter
      - Process Server
      - eService Vendor
      - Civil Filing Clerk
      - Courtroom Deputy
      - Levying Officer
      - Judge
  - Is this nonparty an individual or a business/entity?: nonparty_contact[i].human_or_entity
    input type: radio
    choices:
      - Individual
      - Business/Entity
  - Full Name: nonparty_contact[i].name.text
    show if:
      variable: nonparty_contact[i].human_or_entity
      is: 'Individual'
  - Business/Entity Name: nonparty_contact[i].name.text
    show if:
      variable: nonparty_contact[i].human_or_entity
      is: 'Business/Entity'
  - Address: nonparty_contact[i].address.address
    address autocomplete: True
  - Unit: nonparty_contact[i].address.unit
    required: False
  - City: nonparty_contact[i].address.city
  - State: nonparty_contact[i].address.state
  - Zip: nonparty_contact[i].address.zip
  - Phone: nonparty_contact[i].phone_number
    validate: |
      lambda y: phone_number_is_valid(y) or validation_error("Please enter a valid, 10-digit phone number.")
  - Fax: nonparty_contact[i].fax_number
    validate: |
      lambda y: phone_number_is_valid(y) or validation_error("Please enter a valid, 10-digit phone number.")
    required: False
  - Email Address: nonparty_contact[i].email
    datatype: email
    required: False
---
question: |
  Enter another nonparty case participant?
subquestion: |
  So far, you've entered:
  % for x in nonparty_contact:
  
  * ${nonparty_contact}
  
  % endfor
yesno: nonparty_contact.there_is_another
---
code: |
  clients_and_nonparties = [client + nonparty_contact] if len(nonparty_contact) > 0 else [client]
---
depends on: version
question: |
  Choose the type of document you're drafting
fields: 
  - Document Type: doc.type
    choices:
      - Generic Pleading
      - Notice of Motion and Motion
      - Declaration
      - Memorandum of Points & Authorities
      - Request for Judicial Notice
      - Index of Exhibits
      - Proposed Order
      - Proof of Service
  - Is this a Law & Motion Proceeding?: doc.proceeding
    datatype: yesnoradio
  - note: |
      Does this document support, oppose, or relate to a motion, ex parte application, or other request for order?
---
depends on: version
question: |
  Law & Motion Info
fields:
  - What is the full title of the moving document?: proceeding.moving_doc_title
  - note: |
      Where there's only one plaintiff or defendant, a pithier title can be used.
      
      e.g., *Motion to Compel Further Responses to Special Interrogatories*[BR]But in multi-plaintiff/defendant cases, it's best to specifically identify the specific parties involved in the proceeding.
      
      e.g., *Motion to Compel Defendant Samuel Johnson to Serve Further Responses to Plaintiff Thomas Jones' Special Interrogatories, Set Two*
  - Is there a hearing associated with this proceeding?: doc.has_hrg
    datatype: yesnoradio
  - Who is the moving party or parties?: proceeding.movant
    datatype: checkboxes
    choices:
      code: all_parties
  - Choose whether the ${doc.type} supports, opposes, or replies to: doc.sor
    input type: radio
    choices:
      - in support of
      - in opposition to
      - in reply to
      - objecting to
      - responding to
      - regarding
  - Whose opposition does this document reply to?: opposer
    datatype: checkboxes
    code: party_contact
    show if: 
      variable: doc.sor
      is: 'in reply to'
---
code: |
  if doc.type == 'Declaration':
    doc_type_for_title = f'Declaration of {doc.declarant}'
  else:
    doc_type_for_title = doc.type

  if doc.sor == 'in support of':
    doc.title_suggested = f"{doc_type_for_title} {doc.sor} {client}'s {proceeding.moving_doc_title}"
  elif doc.sor == 'in opposition to':
    proceeding.movant_list = comma_and_list(proceeding.movant.true_values())
    doc.title_suggested = f"{doc_type_for_title} {doc.sor} {proceeding.movant_list}'s {proceeding.moving_doc_title}"
  elif doc.sor == 'in reply to':
    opposer_list = comma_and_list(opposer.true_values())
    doc.title_suggested = f"{doc_type_for_title} {doc.sor} {opposer_list}'s opposition to {client}'s {proceeding.moving_doc_title}"
  else:
    doc.title_suggested = f"{doc_type_for_title} {doc.sor} {proceeding.movant_list}'s {proceeding.moving_doc_title}"
---
depends on: version
code: |
  if doc.title_use_suggested:
    doc.title_full = doc.title_suggested
  else: 
    doc.title_full = doc.title_custom
    
  if wants_shorthand_title:
    doc.footer = doc.title_shorthand
  else:
    doc.footer = doc.title_full
---
depends on: version
question: |
  Custom Document Title & Footer
subquestion: |
    % if not doc.title_use_suggested:
    The suggested title of your document was: 
    
    **${ doc.title_suggested }**
    % endif
    
    Enter the full, captioned title of the document.
fields:
  - Document Title: doc.title_custom
  - note: |
      Pithy, court-approved titles of commonly-filed litigation documents can be found here: [Litigation Filing Titles] (https://lascpubstorage.blob.core.windows.net/cpw/LIBOPSCivil-38-CivilEfilingDocumentNameList.pdf).
  - Short Title for Footer?: wants_shorthand_title
    datatype: yesnoradio
  - Document Shorthand Title: doc.title_shorthand
    show if: wants_shorthand_title
---
depends on: version 
question: |
  Document Title
subquestion: |
    The suggested title of your document is: 
    **${ doc.title_suggested }**
fields:
  - Use the suggested title?: doc.title_use_suggested
    datatype: yesnoradio
  - Short Title for Footer?: wants_shorthand_title
    datatype: yesnoradio
    show if: doc.title_use_suggested
  - Document Shorthand Title: doc.title_shorthand
    show if: wants_shorthand_title
---
depends on: version
code: |
  if doc.type in ['Generic Pleading', 'Notice of Motion and Motion', 'Memorandum of Points & Authorities', 'Request for Judicial Notice']:
    sig_block_type = 'author'
  elif doc.type == 'Declaration' or 'Proof of Service':
    sig_block_type = 'declarant'
  elif doc.type == 'Proposed Order':
    sig_block_type = 'judge'
---
depends on: version
question: |
  ${doc.type} Info
fields:
  - Who is the declarant?: doc.declarant
    code: clients_and_nonparties
    show if:
      variable: doc.type
      is: 'Declaration' 
---
depends on: version
question: |
  Enter hearing information.
fields:
  - Hearing Date: hrg.date
    datatype: date
  - Hearing Time: hrg.time_bad_format
    datatype: time
  - Hearing Dept.: hrg.dept
  - Hearing Judge: hrg.judge
under: |
  Note: Under CCP § 1005, if the papers are served **TODAY**, ${today()}, 16 court days from now is:
  
  * **${sixteen_court_days_from_today_string}** for PERSONAL SERVICE;
  * **${earliest_overnight_or_fax_service_date_string}** for OVERNIGHT DELIVERY or FAX SERVICE;
  * **${eighteen_court_days_from_today_string}** for EMAIL or ELECTRONIC SERVICE;
  * **${earliest_mail_service_date_string}** for REGULAR MAIL SERVICE
   
  Visit Los Angeles County Superior Court's [Court Date Calculator](https://www.lacourt.org/courtdatecalculator/ui/) website for an additional date validation check.
---
depends on: version
code: |
  hrg.time = format_time(hrg.time_bad_format, format='h:mm a')
---
depends on: version
question: |
  Document-Specific Info
subquestion: |
  Choose document options.
fields:
  - Include Statutory Call-Out Under Doc Title in Caption Page?: include_stat_callout
    datatype: yesnoradio
  - Enter the statutory call-out text: stat_callout
    show if: include_stat_callout
  - Include "Concurrently filed with [documents]..." notice?: include_concurrently_filed_docs_notice
    datatype: yesnoradio
  - Enter short titles of concurrently filed documents: concurrently_filed_docs
    show if: include_concurrently_filed_docs_notice
  - Attach exhibits to this document?: attach_exhibits
    datatype: yesnoradio
---
depends on: version
question: |
  Enter Your Exhibits
fields:
  - Short Title: exhibit.new_item_name
  - note: |
      Example Short Titles:
      
      * January 1997 Grant Deed to Jane Doe
      * Defendant's June 17 Meet-and-Confer Letter
---
depends on: version
question: |
  Enter the full description of the ${ i }.
fields:
  - Name: exhibit[i].full_desc
  - "Upload the exhibit now?": exhibit[i].has_documentation
    datatype: yesnoradio
  - note: |
      If an exhibit's not ready for upload, EasyPleader will create an exhibit divider page where you can later insert the exhibit itself.
  - "Upload the exhibit:": exhibit[i].documentation
    datatype: file
    show if: exhibit[i].has_documentation
---
depends on: version
question: |
  Exhibit Review
subquestion: |
  You've entered ${ exhibit.number_as_word() } exhibits:
  
  % for x in exhibit:
  
  * ${ x }
  
  % endfor
    
  Are there more?
yesno: exhibit.there_is_another
---
depends on: version
attachment:
  variable name: exhibit_page[i]
  docx template file: exhibit_insert.docx
---
depends on: version
code: |
  indexno = 0
  for item in exhibit.values():
    item.full_desc
    item.documentation_reference = indexno
    indexno += 1
    if item.has_documentation:
      item.documentation
  information_gathered = True
---
depends on: version
code: |
  document_list = list()
  for item in exhibit.values():
    document_list.append(exhibit_page[item.documentation_reference])
    if item.has_documentation:
      document_list.append(item.documentation)
  bundle = pdf_concatenate(document_list, filename="Exhibit Bundle.pdf")
---
depends on: version
question: |
  Your Exhibit Bundle is Complete
subquestion: |
  ${ action_button_html(bundle.url_for(), color='link', label='Download Exhibit Bundle', icon='file-pdf') }
continue button field: exhibits_bundled
---
depends on: version
question: |
  Signature Block
fields:
  - What date goes in the signature block?: sig_block_date_field
    datatype: radio
    choices:
      - Today
      - Different Date
      - Leave Blank
  - Different Date: sig_block_alternate_date
    datatype: date
    show if: 
      variable: sig_block_date_field
      is: 'Different Date'
  - Sign the document?: doc.sign
    datatype: yesnoradio
---
depends on: version
question: |
  Sign your name
signature: user_signature
under: |
  ${ author.name.text }
---
depends on: version
code: |
  signature = aid_signature if author.is_me else user_signature
---
depends on: version
question: |
  Your ${doc.type} is below.
subquestion: |
  Do you approve?
yesno: user_approves
attachment:
  name: Pleading
  filename: letter
  docx template file: 2023-02-10_pleading_template.docx
  valid formats:
    - pdf
    - docx
include attachment notice: False
---
event: final_screen
question: |
  Well, ${author.name.text}, 
  % if user_approves:
  Hope you liked your ${doc.type}!
  % endif
  We're all through here...
action buttons:
  - label: Try again
    action: new_version
    color: primary