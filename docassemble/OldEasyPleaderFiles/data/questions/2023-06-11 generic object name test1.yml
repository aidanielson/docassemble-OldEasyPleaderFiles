features:
  centered: False
---
mandatory: True
code: |
  intro_screen
  litigants.gather()
  clients.gather()
  final_screen
---
objects:
  - clients: DAList.using(object_type=Individual, there_are_any=True, complete_attribute=['party_role', 'address.address'])
  - litigants: DAList.using(object_type=Individual, there_are_any=True, complete_attribute='complete')
---
code: |
  litigants[i].party_role
  litigants[i].address.address
  litigants[i].complete = True
---
id: intro screen
question: Welcome to EasyPleader
fields:
  - AID is **NOT** the Author: aid_not_author
    datatype: yesno
continue button field: intro_screen
---
id: set aid as author
code: |
  author[0].name.first = "Anthony"
  author[0].name.middle = "I"
  author[0].name.last = "Danielson"
  author[0].law_firm = "Danielson Kim Law Group, P.C."
  author[0].law_firm_role = "managing partner of"
  author[0].bar_state = "CA"
  author[0].bar_number = "285576"
  author[0].address.address = "5170 Golden Foothill Parkway"
  author[0].address.city = "El Dorado Hills"
  author[0].address.state = "CA"
  author[0].address.zip = "95762"
  author[0].phone = "(916) 520-3977"
  author[0].fax = "(916) 543-1601"
  author[0].email = "Anthony@DanielsonKim.com"
  set_aid_author = True
---
id: contact type name role
check in: question_food
generic object: Individual
question: |
  ${ x.ask_name_and_role_template.subject }
subquestion: |
  % if 'litigants' in x.instanceName:
  ${ x.instanceName }
  % endif
right: |
  <div class="da-page-header"><h1 class="h3">Preview of Full, Captioned Party Name</h1></div>
  [TARGET food_section_text]
fields:
  - Litigation Role: x.party_role
    datatype: combobox
    choices:
      - Plaintiff
      - Defendant
      - Receiver
  - Person or Entity: x.person_type
    datatype: radio
    choices:
      - Human: human
      - Someone Acting NOT on Their Personal Behalf: person_specific_capacity
      - Entity (Company/Governmental Org): entity
      - Something Else: other
  - First Name: x.name.first
    show if: 
      variable: x.person_type
      is: human
  - Middle Name: x.name.middle
    required: False
    show if: 
      variable: x.person_type
      is: human
  - Last Name: x.name.last
    show if: 
      variable: x.person_type
      is: human
  - Representative Name: x.name.first
    show if: 
      variable: x.person_type
      is: person_specific_capacity
  - Representing in what capacity?: x.capacity
    input type: combobox
    choices:
      - trustee
      - co-trustee
      - executive director and designated representative
      - administrator
    show if: 
      variable: x.person_type
      is: person_specific_capacity
  - Represented Trust/Entity Name: x.representee
    show if: 
      variable: x.person_type
      is: person_specific_capacity
  - Entity **Name**: x.name.first
    show if: 
      variable: x.person_type
      is: entity
  - Entity **Type**: x.entity_type
    input type: combobox
    choices:
      - a California corporation
      - a California limited liability company
      - a California professional corporation
      - a municipal corporation
    show if: 
      variable: x.person_type
      is: entity
  - Short Name: x.short_name
  - Gender: x.gender
    input type: radio
    choices:
      - Male: male
      - Female: female
      - Other: other
    js show if:
      val('x.person_type') == 'human' || val('x.person_type') == 'person_specific_capacity'
  - Is the party represented by counsel?: x.is_represented
    datatype: yesno
    show if:
      code: |
        'litigants' in x.instanceName
---  
id: author info
generic object: Individual
question: |
  ${ title_case(x.object_name()) } Info
fields:
  - First Name: x.name.first
  - Middle Name: x.name.middle
    required: False
  - Last Name: x.name.last
  - Law Firm: x.law_firm
  - Bar Number: x.bar_number
  - Bar State: x.bar_state
    default: 'CA'
---
template: question_food
content: |
  % if action_argument('x.person_type') == 'human':
  ### **${ action_argument('x.party_role') + ' ' + action_argument('x.name.first') } ${ action_argument('x.name.middle') or '' } ${ action_argument('x.name.last') } (${ action_argument('x.short_name') })**
  % elif action_argument('x.person_type') == 'person_specific_capacity':
  **${ action_argument('x.party_role') + ' ' + action_argument('x.name.first') + ', ' + action_argument('x.capacity') + ' of ' + action_argument('x.representee') } (${ action_argument('x.short_name') })**
  % else:
  **${ action_argument('x.party_role') + ' ' + action_argument('x.name.first') + ', ' + action_argument('x.entity_type') } (${ action_argument('x.short_name') })**
  % endif
target: food_section_text
---
generic object: Individual
question: What is zxzx ${ x } zxzx address?
fields:
  - Address: x.address.address
    address autocomplete: True
  - Unit/Suite: x.address.unit
    required: False
  - City: x.address.city
  - State: x.address.state
  - Zip Code: x.address.zip
  - note: |
      #### ---Phone, Fax & Email---
  - Phone: x.phone
    validate: |
      lambda y: (not y or phone_number_is_valid(y)) or validation_error("Please enter a valid, 10-digit phone number.")
    required: False
  - Second Phone?: x.add_second_phone
    datatype: yesno
  - Second Phone Number: x.second_phone
    validate: |
      lambda y: (not y or phone_number_is_valid(y)) or validation_error("Please enter a valid, 10-digit phone number.")
    required: False
    show if: x.add_second_phone
  - Fax: x.fax
    validate: |
      lambda y: (not y or phone_number_is_valid(y)) or validation_error("Please enter a valid, 10-digit phone number.")
    required: False
  - Email: x.email
    datatype: email
    required: False
  - Second Email?: x.add_second_email
    datatype: yesno
  - Second Email Address: x.second_email
    datatype: email
    show if: x.add_second_email
validation code: |
  for attr in ['phone', 'fax', 'second_phone']:
    if not showifdef(f'x.{attr}'):
        setattr(x, attr, 'Unknown')
    else:
        setattr(x, attr, phone_number_formatted(getattr(x, attr)))
---
generic object: DAList
question: Is there another ${ x.object_name() }?
yesno: x.there_is_another
---
generic object: Individual
template: x.ask_name_and_role_template
subject: |
  % if 'litigants' in x.instanceName:
  Litigant Name & Party Role
  % elif 'clients' in x.instanceName:
  Client Name & Party Role
  % else:
  Nonparty Name & Role
  % endif
content: ""
---
id: final screen
event: final_screen
question: Results
subquestion: |
  
  The 'litigants[0].object_name()' is: ${ litigants[0].object_name() }
  The 'litigants[0].instanceName' is: ${ litigants[0].instanceName }

buttons:
  - Try again: restart