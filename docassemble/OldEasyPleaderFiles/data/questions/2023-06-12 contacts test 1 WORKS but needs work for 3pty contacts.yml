features:
  centered: False
---
mandatory: True
code: |
  third_parties.gather()
  aid_not_author
  if aid_not_author:
    author.gather()
  else:
    set_aid_author
  clients.gather()
  litigants.gather()
  final_screen
---
objects:
  - author: DAList.using(object_type=Individual, there_are_any=True, there_is_another=False, complete_attribute=['law_firm', 'address.address'])
  - clients: DAList.using(object_type=Individual, there_are_any=True, complete_attribute=['party_role', 'address.address', 'process_name_code_block'])
  - litigants: DAList.using(object_type=Individual, there_are_any=True, complete_attribute='complete')
  - litigants[i].attorneys: DAList.using(object_type=Individual, there_are_any='litigants[i].is_represented', complete_attribute=['law_firm', 'address.address'])
  - third_parties: DAList.using(object_type=Individual, complete_attribute=['nonparty_role', 'address.address', 'process_name_code_block'])
---
variable name: party_role_list
data:
  - Plaintiff
  - Defendant
  - Petitioner
  - Respondent
  - Court-Appointed Receiver
  - Proposed Court-Appointed Receiver
  - Claimant
  - Real-Party-in-Interest
  - Judgment Creditor
  - Assignee & Judgment Creditor
  - Judgment Debtor
  - Appellant
  - Appellee
  - Conservator
  - Conservatee
---
variable name: nonparty_role_list
data:
  - Process Server
  - Court Filing Vendor
  - Civil Filing Clerk
  - Fact Witness
  - Expert Witness
  - Court Reporter
  - Interpreter
  - eService Vendor
  - Courtroom Deputy
  - Levying Officer
  - Judge
  - Garnishee
---
code: |
  litigants[i].party_role
  if litigants[i].is_represented:
    litigants[i].attorneys.gather()
  else:
    litigants[i].address.address
  litigants[i].process_name_code_block
  litigants[i].complete = True
---
id: third party are there any question
question: Do you want to add third parties now?
yesno: third_parties.there_are_any
---
id: intro screen
question: Welcome to EasyPleader
fields:
  - AID is **NOT** the Author!: aid_not_author
    datatype: yesno
---
id: set aid as author
if: not aid_not_author
code: |
  author[0].name.first = "Anthony"
  author[0].name.middle = "I"
  author[0].name.last = "Danielson"
  author[0].law_firm = "Danielson Kim Law Group, P.C."
  author[0].law_firm_role = "managing partner of"
  author[0].bar_state = "CA"
  author[0].bar_number = "285576"
  author[0].address.address = "5170 Golden Foothill Parkway"
  author[0].address.city = "El Dorado Hills"
  author[0].address.state = "CA"
  author[0].address.zip = "95762"
  author[0].phone = "(916) 520-3977"
  author[0].fax = "(916) 543-1601"
  author[0].email = "Anthony@DanielsonKim.com"
  set_aid_author = True
---
id: contact type name role
check in: question_food
generic object: Individual
question: |
  ${ x.ask_name_and_role_template.subject }
subquestion: |
  ${ x.ask_name_and_role_template.content }
right: |
  <div class="da-page-header"><h1 class="h3">Preview of Full, Captioned Party Name</h1></div>
  [TARGET food_section_text]
fields:
  - Party: x.party_role
    datatype: combobox
    choices: 
      code: party_role_list
    show if:
      code: |
        'third_parties' not in x.instanceName
  - Nonparty Role: x.nonparty_role
    datatype: combobox
    choices: 
      code: nonparty_role_list
    show if:
      code: |
        'third_parties' in x.instanceName
  - Person or Entity: x.person_type
    datatype: radio
    choices:
      - Human: human
      - Trustee/Other Representative Capacity: person_specific_capacity
      - Entity (Company/Governmental Org): entity
      - Something Else: other
    show if:
      code: |
        'third_parties' not in x.instanceName
  - First Name: x.name.first
    show if: 
      variable: x.person_type
      is: human
  - Middle Name: x.name.middle
    required: False
    show if: 
      variable: x.person_type
      is: human
  - Last Name: x.name.last
    show if: 
      variable: x.person_type
      is: human
  - Representative Name: x.name.first
    show if: 
      variable: x.person_type
      is: person_specific_capacity
  - Representing in what capacity?: x.capacity
    input type: combobox
    choices:
      - trustee
      - co-trustee
      - executive director and designated representative
      - administrator
    show if: 
      variable: x.person_type
      is: person_specific_capacity
  - Represented Trust/Entity Name: x.representee
    show if: 
      variable: x.person_type
      is: person_specific_capacity
  - Entity **Name**: x.name.first
    show if: 
      variable: x.person_type
      is: entity
  - Entity **Type**: x.entity_type
    input type: combobox
    choices:
      - a California corporation
      - a California limited liability company
      - a California professional corporation
      - a municipal corporation
    show if: 
      variable: x.person_type
      is: entity
  - Employer: x.employer_name
    show if:
      code: |
        'third_parties' in x.instanceName
  - Title: x.employee_title
    show if:
      code: |
        'third_parties' in x.instanceName
  - Short Name: x.short_name
  - Gender: x.gender
    input type: radio
    choices:
      - Male: male
      - Female: female
      - Other: other
    js show if:
      val('x.person_type') == 'human' || val('x.person_type') == 'person_specific_capacity'
  - Is the party represented by counsel?: x.is_represented
    datatype: yesno
    show if:
      code: |
        'litigants' in x.instanceName
---
id: author info
generic object: Individual
question: |
  % if 'author' in x.instanceName:
  Your Caption Info
  % else:
  ${ value(x.instanceName.split(".")[0]) }'s Lawyer's Info
  % endif
fields:
  - First Name: x.name.first
  - Middle Name: x.name.middle
    required: False
  - Last Name: x.name.last
  - Law Firm: x.law_firm
  - Bar Number: x.bar_number
  - Bar State: x.bar_state
    default: 'CA'
---
template: question_food
content: |
  % if action_argument('x.person_type') == 'human':
  ### **${ action_argument('x.party_role' if any(word in x.instanceName for word in ['clients', 'litigants']) else 'x.nonparty_role') + ' ' + action_argument('x.name.first') } ${ action_argument('x.name.middle') or '' } ${ action_argument('x.name.last') } (${ action_argument('x.short_name') })**
  % elif action_argument('x.person_type') == 'person_specific_capacity':
  ### **${ action_argument('x.party_role') + ' ' + action_argument('x.name.first') + ', ' + action_argument('x.capacity') + ' of ' + action_argument('x.representee') } (${ action_argument('x.short_name') })**
  % else:
  ### **${ action_argument('x.party_role') + ' ' + action_argument('x.name.first') + ', ' + action_argument('x.entity_type') } (${ action_argument('x.short_name') })**
  % endif
target: food_section_text
---
generic object: Individual
question: ${ x }'s Service Address & Contact Info
fields:
  - Address: x.address.address
    address autocomplete: True
  - Unit/Suite: x.address.unit
    required: False
  - City: x.address.city
  - State: x.address.state
  - Zip Code: x.address.zip
  - note: |
      #### ---Phone, Fax & Email---
  - Phone: x.phone
    validate: |
      lambda y: (not y or phone_number_is_valid(y)) or validation_error("Please enter a valid, 10-digit phone number.")
    required: False
  - Fax: x.fax
    validate: |
      lambda y: (not y or phone_number_is_valid(y)) or validation_error("Please enter a valid, 10-digit phone number.")
    required: False
    show if:
      code: |
        'attorneys' in x.instanceName
  - Email: x.email
    datatype: email
    required: False
  - Add **More** Contact Info: x.add_addl_contact_info
    datatype: yesno
    show if:
      code: |
        'author' not in x.instanceName
  - Secondary Phone Number: x.second_phone
    validate: |
      lambda y: (not y or phone_number_is_valid(y)) or validation_error("Please enter a valid, 10-digit phone number.")
    required: False
    show if: x.add_addl_contact_info
  - Secondary Email Address: x.second_email
    datatype: email
    show if: x.add_addl_contact_info
    required: False
validation code: |
  for attr in ['phone', 'fax', 'second_phone']:
    if not showifdef(f'x.{attr}'):
        setattr(x, attr, 'unknown')
    else:
        setattr(x, attr, phone_number_formatted(getattr(x, attr)))
---
generic object: DAList
question: ${ x.ask_there_is_another_template.subject }
yesno: x.there_is_another
---
code: |
  everyone = author.complete_elements() + clients.complete_elements() + litigants.complete_elements() + third_parties.complete_elements()
---
code: |
  all_parties = clients.complete_elements() + litigants.complete_elements()
---
id: name code block
generic object: Individual
code: |
  if x.person_type == 'human':
    x.whole_name = x.name.full()
  elif x.person_type == 'person_specific_capacity':
    x.whole_name = x.name.first + ', ' + x.capacity + ' of ' + x.representee
  else:
    x.whole_name = x.name.first + ', ' + x.entity_type
    
  x.complete_formal_name = x.party_role + ' ' + x.whole_name + ' (' + x.short_name + ')'
  
  x.process_name_code_block = True
---
id: author caption block
code: |
  author_caption_block = f"""{author[0].name.full()}\n\n{author[0].law_firm}\n\n{author[0].address.address}\n\n{author[0].address.city}, {author[0].address.state} {author[0].address.zip}\n\nPhone: {author[0].phone}\n\nFax: {author[0].fax}\n\nEmail: {author[0].email}
  """
---
question: "*Everyone* Test Block"
fields:
  - Which party opposed the motion?: xyz
    datatype: object
    choices: everyone
---
generic object: Individual
template: x.ask_name_and_role_template
subject: |
  % if 'litigants' in x.instanceName:
  Other Parties
  % elif 'clients' in x.instanceName:
  Client(s)
  % else:
  Non-Party Contacts
  % endif
content: |
  % if 'litigants' in x.instanceName:
  Name & Party Role
  % elif 'clients' in x.instanceName:
  Name & Party Role
  % else:
  Name & Role
  % endif
---
generic object: DAList
template: x.ask_there_is_another_template
subject: |
  % if 'litigants' in x.instanceName and 'attorneys' not in x.instanceName:
  Add another Party?
  % elif 'clients' in x.instanceName:
  Add another Client?
  % elif 'attorneys' in x.instanceName:
  Does ${ value(x.instanceName.split(".")[0]) } have another lawyer?
  % else:
  Add another Third-Party Contact?
  % endif
content: |
  ""
---
id: final screen
event: final_screen
question: Results
subquestion: |
  **---AUTHOR CAPTION BLOCK---**
  
  % for auth in author:
  ${ author_caption_block }
  % endfor
  
  **---AUTHOR CAPTION BLOCK---**
  
  **---PARTY SERVICE LIST---**
  
  % for litigant in litigants:
  % if not litigant.is_represented:
  ${ litigant.address_block() }[BR]
  Phone: ${ litigant.phone }[BR]
  Fax: ${ litigant.fax }[BR]
  % if defined('litigant.second_phone'):
  Second Phone: ${ litigant.second_phone }[BR]
  % endif
  Email: ${ litigant.email }[BR]
  % if defined('litigant.second_email'):
  Second Email: ${ litigant.second_email }[BR]
  % endif
  % else:
  % for attorney in litigant.attorneys:
  ${ attorney.law_firm }[BR]
  ${ attorney.address_block() }[BR]
  Phone: ${ attorney.phone }[BR]
  Fax: ${ attorney.fax }[BR]
  % if defined('attorney.second_phone'):
  Second Phone: ${ attorney.second_phone }[BR]
  % endif
  Email: ${ attorney.email }[BR]
  % if defined('attorney.second_email'):
  Second Email: ${ attorney.second_email }[BR]
  % endif
  % endfor
  ***Attorney for ${ litigant.party_role } ${ litigant.whole_name }***
  % endif
  % endfor
  
  **---PARTY SERVICE LIST---**
  
  The party that opposed the motion is: ${ xyz } whose address is: ${ xyz.address.on_one_line() }
buttons:
  - Try again: restart