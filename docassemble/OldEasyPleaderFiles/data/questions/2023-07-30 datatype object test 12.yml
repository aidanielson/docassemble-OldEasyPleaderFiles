include:
  docassemble.AssemblyLine:al_package.yml
---
features: 
  progress bar: False
---
mandatory: True
code: |
  parties.gather()
  check_everyone
  oldest_person.gather()
  check_everyone_2
  check_combined_all_people
  opposing_parties
  final_screen
---
objects:
  parties: ALPeopleList.using(object_type=ALIndividual, there_are_any=True, complete_attribute='complete')
  parties[i].lawyers: ALPeopleList.using(object_type=ALIndividual)
  lawyer_list: ALPeopleList.using(object_type=ALIndividual, gathered=True)
  oldest_person: ALPeopleList.using(object_type=ALIndividual, ask_number=True, target_number=1)
  nonparties: ALPeopleList.using(object_type=ALIndividual)
  combined_all_people: ALPeopleList.using(auto_gather=False, gathered=True)
  everyone: DASet.using(auto_gather=False, gathered=True)
  opposing_parties: ALPeopleList(object_type=ALIndividual, auto_gather=False, gathered=True)
---
generic object: ALPeopleList
code: |
  x[i].name.first
  if x[i].lawyers.there_are_any:
    x[i].lawyers.gather()
  x[i].complete = True
---
id: gather parties
sets: x[0].name.first
generic object: ALPeopleList
question: Parties
subquestion: |
  % for party in parties.complete_elements():
  
  1. **${ party.role } ${ party } (rep'd by ${ party.lawyers })**
  
  % endfor
fields:
  - First Name: x[i].name.first
  - Last Name: x[i].name.last
  - Role: x[i].role
    datatype: radio
    choices:
      - Plaintiff
      - Defendant
      - Cross-Defendant
  - Represented by counsel?: x[i].lawyers.there_are_any
    datatype: yesno
---
id: add another party
question: Add party?
subquestion: |
  % for party in parties.complete_elements():
  
  **1. ${ party.role } ${ party } (rep'd by ${ party.lawyers })**
  % endfor
yesno: parties.there_is_another
---
id: gather party lawyers
generic object: ALPeopleList
question: ${ x[i] }'s Lawyer(s)
subquestion: |
  % if len(x[i].lawyers.complete_elements()) > 0:
  ${ x[i].lawyers.complete_elements() }
  % endif
fields: 
  - An ***Existing*** Lawyer: x[i].lawyers[j]
    datatype: object
    choices: lawyer_list.complete_elements()
    disable others: True
    exclude: x[i].lawyers
    show if: 
      code: |
        len(lawyer_list) > 0
  - First Name: x[i].lawyers[j].name.first
  - Last Name: x[i].lawyers[j].name.last
validation code: |
  if x[i].lawyers[j] not in lawyer_list:
    lawyer_list.append(x[i].lawyers[j])
    lawyer_list.sort(key=lambda y: y.name.last)
---
id: add a party lawyer
question: Does ${ parties[i] } have another lawyer?
subquestion: |
  ${ parties[i].lawyers.complete_elements() }
yesno: parties[i].lawyers.there_is_another
---
id:  proceeding short reference
question: What's the short reference for the proceeding/motion/RFO?
fields:
  - Short Ref.: proceeding_short_ref
---
id: check set of all people
reconsider:
  - everyone
question: The variable 'combined_all_people' is
subquestion: |
  'parties' is: **${ parties }**[BR][BR]
  'parties.complete_elements' is: **${ parties.complete_elements() }**[BR][BR]
  'lawyer_list' is: **${ lawyer_list }**[BR][BR]
  'lawyer_list.complete_elements' is: **${ lawyer_list.complete_elements() }**[BR][BR]
  'everyone' is: **${ everyone }**[BR][BR]
  People NOT in everyone, but IN one of the lists (parties, lawyer_list, or oldest_person) are:
  % for party in [parties.complete_elements(), lawyer_list.complete_elements(), oldest_person.complete_elements()]:
  % if party not in everyone:
  **${ party }**
  % endif
  % endfor
continue button field: check_everyone
---
id: check combined all people
reconsider:
  - everyone
question: The variable 'everyone' is
subquestion: |
  **'oldest_person' is: ${ oldest_person }**[BR]
  **'everyone' is: ${ everyone }**[BR]
continue button field: check_combined_all_people
---
id: select oldest party
reconsider: 
  - everyone
question: Who is the oldest party?
subquestion: |
  Parties: ${ parties.complete_elements() }
fields:
  - An ***Existing*** Party: oldest_person[i]
    datatype: object
    choices: everyone
    disable others: True
  - First Name: oldest_person[i].name.first
  - Last Name: oldest_person[i].name.last
  - Role: oldest_person[i].role
#validation code: |
#  if oldest_person not in parties:
#    parties.appendObject()
#    parties[-1].name.first = oldest_person.name.first
#    parties[-1].name.last = oldest_person.name.last
#    oldest_person = parties[-1]
---
id: check set of all people 2
reconsider:
  - everyone
question: The variable 'everyone' is
subquestion: |
  OP variable text appears below this line[BR][BR]
  ${ oldest_person.complete_elements() }[BR][BR]
  OP variable text appears above this line[BR][BR]
  'parties' is: **${ parties }[BR][BR]
  'parties.complete_elements()' is: ${ parties.complete_elements() }**[BR][BR]
  'everyone' is: **${ everyone }**
continue button field: check_everyone_2
---
id: select opposing parties
question: Who are the parties opposing this filing?
subquestion: |
    **Parties: ${ parties.complete_elements() }**[BR]**Oldest Person: ${ oldest_person.complete_elements() }**
fields:
  - Existing Parties: opposing_parties
    datatype: object_checkboxes
    choices: parties.complete_elements() + oldest_person.complete_elements()
    none of the above: |
      None of these
#  - First Name: opposing_parties.name
#    show if:
#      variable: opposing_parties
#      is: null
#  - Last Name: opposing_parties.name.last
#   show if:
#     variable: opposing_parties
#     is: null
#  - Some Variable: opposing_parties.some_variable
---
id: pick a subset of opposing parties
question: Who is the worst of the opposing parties?
fields:
  - Pick the worst one: worst_opponent
    datatype: object_radio
    choices: opposing_parties.complete_elements()
under: |
  **Parties: ${ parties.complete_elements() }[BR]Oldest Person: ${ oldest_person }[BR]
  Opponents: ${ opposing_parties }**
---
id: pick service method
generic object: ALPeopleList
question: How was ${ x[i] } served?
fields:
  - Method: x[i].svc_method
    datatype: checkboxes
    choices: 
      - Regular Mail
      - Email
      - Fax
      - Overnight Delivery
---
id: set everyone
code: |
  everyone = parties.complete_elements() + lawyer_list.complete_elements() + oldest_person.complete_elements()
#  if showifdef('parties'):
#    combined_all_people.extend(parties.complete_elements())
#  if showifdef('lawyer_list'):
#    combined_all_people.extend(lawyer_list.complete_elements())
#  if showifdef('oldest_person'):
#    combined_all_people.extend(oldest_person.complete_elements())
#  set_of_all_people.add(combined_all_people)
#  set_of_all_people.gathered = True
#  combined_all_people = parties + lawyer_list
#  all_unique_people.add(combined_all_people)
---
id: final screen
event: final_screen
question: |
  **Party List**[BR]
  % for party in parties:
  1. ${ party }[BR]
  % endfor
  [BR]
  **Lawyer List**
  % for lawyer in lawyer_list:
  1. ${ lawyer }[BR]
  % endfor
  **Combined Party/Lawyer List**
  [BR][BR] 
  % for party in parties:
  ${ party.role } ${ party }
    % if party.lawyers.there_are_any:
    is represented by:   
      % for lawyer in party.lawyers:
      ${ lawyer } 
      % endfor
    % endif
  [BR]
  % endfor
  **Oldest Party**
  [BR]
  ${ oldest_person }
  [BR]
  **Opposing Parties**
  [BR]
  The parties opposing the ${ proceeding_short_ref } is/are 
  % for rdf in opposing_parties:
  1. ${ rdf.role } ${ rdf }, served via ${ rdf.svc_method.true_values() }[BR]
  % endfor
  And the worst of these is ${ worst_opponent}
  [BR][BR]
  ***All Human Beings (Party or not) ('everyone')***
  [BR]
  % for xcv in everyone:
  1. ${ xcv }
  % endfor